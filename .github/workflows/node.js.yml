name: Node.js CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x, 22.x]
        browser: [chrome, firefox]

    steps:
      # Checkout the repository
      - uses: actions/checkout@v4

      # Set up Node.js
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      # Install dependencies
      - run: npm ci

      - name: Backend Test
        run: npm run backend-test

      # Build the application (if applicable)
      - run: npm run build --if-present

      # Install Cypress
      - name: Install Cypress
        run: npm install cypress

      # Run Cypress tests
      - name: Run Cypress tests in ${{ matrix.browser }}
        run: |
          npx cypress run --browser ${{ matrix.browser }}

      # Ensure Docker Compose is installed
      - name: Install Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose

      # Log in to Docker Hub
      - name: Login to Docker
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Build and run Docker Compose
      - name: Docker Compose Build and Up
        run: |
          docker-compose config  # Validate the compose file
          docker-compose build || exit 1  # Build with error handling
          docker-compose up -d || exit 1  # Run in detached mode
        env:
          DOCKER_BUILDKIT: 1  # Enable BuildKit for faster builds

      # Verify Docker Containers
      - name: Verify Running Containers
        run: docker ps -a

      # Push Docker Image
      - name: Push Docker Image
        run: docker-compose push || exit 1

      - name: Azure CLI Download and Upgrade
        run: |
          az aks install-cli
          az upgrade --yes  # Ensure Azure CLI is up-to-date

      - name: Azure Login
        run: az login --service-principal -u "${{ secrets.AZURE_CLIENT_ID }}" -p "${{ secrets.AZURE_CLIENT_SECRET }}" --tenant "${{ secrets.AZURE_TENANT_ID }}"

      - name: Create Resource Group (if not exists)
        run: |
          az group show --name rmsDevOpsGroup --subscription "817d3e18-4278-4b40-9af7-3ad7e73f6664" || \
          az group create --name rmsDevOpsGroup --location "centralus" --subscription "817d3e18-4278-4b40-9af7-3ad7e73f6664"

      - name: Azure AKS Creation
        run: |
          az aks show --resource-group rmsDevOpsGroup --name rmsAKSCluster --subscription "817d3e18-4278-4b40-9af7-3ad7e73f6664" || \
          az aks create --resource-group rmsDevOpsGroup --name rmsAKSCluster --node-count 1 --generate-ssh-keys --subscription "817d3e18-4278-4b40-9af7-3ad7e73f6664"

      - name: Azure Get Credential
        run: az aks get-credentials --resource-group rmsDevOpsGroup --name rmsAKSCluster --overwrite-existing --subscription "817d3e18-4278-4b40-9af7-3ad7e73f6664"

      - name: Kubernetes Deployment
        run: |
          kubectl apply -f rms-deployment.yaml
          kubectl apply -f rms-service.yaml
          kubectl rollout history deployment/rms-deployment
          kubectl get pods
          kubectl get services
